package ginchrono

import (
	"fmt"
	"log"
	"time"

	"github.com/gin-gonic/gin"
)

// Config holds configuration for the middleware
type Config struct {
	// Threshold in milliseconds after which to log warning
	WarningThreshold time.Duration
	// Whether to log all requests, not just slow ones
	LogAllRequests bool
	// Custom logger function - if nil, standard log package is used
	Logger func(format string, v ...interface{})
}

// DefaultConfig returns a default configuration
func DefaultConfig() Config {
	return Config{
		WarningThreshold: 500 * time.Millisecond, // 500ms default threshold
		LogAllRequests:   false,                  // only log slow requests by default
		Logger:           log.Printf,             // use standard logger by default
	}
}

// New returns a gin middleware for logging response times
func New(config Config) gin.HandlerFunc {
	return func(c *gin.Context) {
		// Start timer
		start := time.Now()

		// Process request
		c.Next()

		// Calculate duration
		duration := time.Since(start)

		// Skip logging if it's not a slow request and we're not logging all requests
		if !config.LogAllRequests && duration < config.WarningThreshold {
			return
		}

		// Prepare status code and color based on duration
		statusCode := c.Writer.Status()
		var logLevel string
		if duration >= config.WarningThreshold {
			logLevel = "WARN"
		} else {
			logLevel = "INFO"
		}

		// Create log message
		message := fmt.Sprintf("[%s] %v | %3d | %13v | %15s | %-7s %s",
			logLevel,
			time.Now().Format("2006/01/02 - 15:04:05"),
			statusCode,
			duration,
			c.ClientIP(),
			c.Request.Method,
			c.Request.URL.Path,
		)

		// Add error if present
		if len(c.Errors) > 0 {
			message += " | " + c.Errors.String()
		}

		// Log using configured logger
		if config.Logger != nil {
			config.Logger(message)
		} else {
			log.Print(message)
		}
	}
}
